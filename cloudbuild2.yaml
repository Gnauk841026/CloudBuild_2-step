steps:
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    set -e
    set -x
    
    # 決定要部署的 image
    if [ -n "$_SPECIFIED_IMAGE" ]; then
      deploy_image="$_SPECIFIED_IMAGE"
    else
      # 獲取最新的鏡像標籤
      latest_tag=$(gcloud artifacts docker tags list asia-east1-docker.pkg.dev/terraform-429505/my-registry/hello-js --format='value(tag)' --sort-by=~timestamp --limit=1)
      deploy_image="asia-east1-docker.pkg.dev/terraform-429505/my-registry/hello-js:$latest_tag"
    fi
    
    echo "正在部署鏡像: $deploy_image"
    
    # 安裝 SSH 客戶端
    apt-get update && apt-get install -y openssh-client
    
    # 準備 SSH
    mkdir -p /root/.ssh
    chmod 700 /root/.ssh
    gcloud secrets versions access latest --secret=ssh-key > /root/.ssh/id_rsa
    chmod 600 /root/.ssh/id_rsa
    
    # 將 SSH 密鑰添加到 known_hosts
    ssh-keyscan -H 35.194.144.97 >> /root/.ssh/known_hosts
    
    # 連接到 VM 並執行部署腳本
    ssh -i /root/.ssh/id_rsa -o StrictHostKeyChecking=no lucifer_suriel@35.194.144.97 << EOF
      set -e
      set -x
      
      # 檢查並安裝 Docker（如果不存在）
      if ! command -v docker &> /dev/null; then
        echo "未找到 Docker。正在安裝 Docker..."
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable"
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io
      fi
      
      # 配置 Docker 以使用 gcloud 作為憑證助手
      gcloud auth configure-docker asia-east1-docker.pkg.dev --quiet
      
      # 使用 gcloud 作為憑證幫助程序來拉取指定鏡像
      sudo -E docker pull $deploy_image
      
      # 停止並移除舊容器（如果存在）
      sudo docker stop hello-js || true
      sudo docker rm hello-js || true
      
      # 運行新容器
      sudo docker run -d --name hello-js -p 80:3000 $deploy_image
      
      # 顯示正在運行的容器
      sudo docker ps
    EOF
substitutions:
  '_SPECIFIED_IMAGE': ''
timeout: '1200s'
options:
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET
